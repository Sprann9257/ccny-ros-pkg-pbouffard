Index: gridfastslam/gridslamprocessor.cpp
===================================================================
--- gridfastslam/gridslamprocessor.cpp	(working copy)
+++ gridfastslam/gridslamprocessor.cpp	(working copy1)
@@ -313,8 +313,8 @@
   }
   
   
-  bool GridSlamProcessor::processScan(const RangeReading & reading, int adaptParticles){
-    
+  bool GridSlamProcessor::processScan(const RangeReading & reading, OrientedPoint pose3d, int adaptParticles){
+     
     /**retireve the position from the reading, and compute the odometry*/
     OrientedPoint relPose=reading.getPose();
     if (!m_count){
@@ -456,6 +456,7 @@
 	  
 	  // cyr: not needed anymore, particles refer to the root in the beginning!
 	  TNode* node=new	TNode(it->pose, 0., it->node,  0);
+    node->pose3d = pose3d;
 	  //node->reading=0;
           node->reading = reading_copy;
 	  it->node=node; 
Index: gridfastslam/gridslamprocessor.h
===================================================================
--- gridfastslam/gridslamprocessor.h	(working copy)
+++ gridfastslam/gridslamprocessor.h	(working copy1)
@@ -54,7 +54,8 @@
       ~TNode();
 
       /**The pose of the robot*/
-      OrientedPoint pose; 
+      OrientedPoint pose;
+      OrientedPoint pose3d;
       
       /**The weight of the particle*/
       double weight;
@@ -152,7 +153,7 @@
     
     //the "core" algorithm
     void processTruePos(const OdometryReading& odometry);
-    bool processScan(const RangeReading & reading, int adaptParticles=0);
+    bool processScan(const RangeReading & reading, OrientedPoint pose3d, int adaptParticles=0);
     
     /**This method copies the state of the filter in a tree.
      The tree is represented through reversed pointers (each node has a pointer to its parent).



