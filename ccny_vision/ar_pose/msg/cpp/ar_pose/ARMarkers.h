/* auto-generated by genmsg_cpp from /home/idryanov/ros/stacks/ccny-ros-pkg/ccny_vision/ar_pose/msg/ARMarkers.msg.  Do not edit! */
#ifndef AR_POSE_ARMARKERS_H
#define AR_POSE_ARMARKERS_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

#include "roslib/Header.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Quaternion.h"
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/PoseWithCovariance.h"
#include "ar_pose/ARMarker.h"

namespace ar_pose
{

//! \htmlinclude ARMarkers.msg.html

class ARMarkers : public ros::Message
{
public:
  typedef boost::shared_ptr<ARMarkers> Ptr;
  typedef boost::shared_ptr<ARMarkers const> ConstPtr;

  typedef roslib::Header _header_type;
  typedef std::vector<ar_pose::ARMarker> _markers_type;

  roslib::Header header;
  std::vector<ar_pose::ARMarker> markers;

  ARMarkers() : ros::Message()
  {
  }
  ARMarkers(const ARMarkers &copy) : ros::Message(),
    header(copy.header)
  {
    (void)copy;
    markers = copy.markers;
  }
  ARMarkers &operator =(const ARMarkers &copy)
  {
    if (this == &copy)
      return *this;
    markers.clear();
    header = copy.header;
    markers = copy.markers;
    return *this;
  }
  virtual ~ARMarkers() 
  {
    markers.clear();
  }
  inline static std::string __s_getDataType() { return std::string("ar_pose/ARMarkers"); }
  inline static std::string __s_getMD5Sum() { return std::string("b35e1e178a9cd7039dbb63cf2764131a"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "Header header\n"
    "ARMarker[] markers\n"
    "\n"
    "================================================================================\n"
    "MSG: roslib/Header\n"
    "# Standard metadata for higher-level stamped data types.\n"
    "# This is generally used to communicate timestamped data \n"
    "# in a particular coordinate frame.\n"
    "# \n"
    "# sequence ID: consecutively increasing ID \n"
    "uint32 seq\n"
    "#Two-integer timestamp that is expressed as:\n"
    "# * stamp.secs: seconds (stamp_secs) since epoch\n"
    "# * stamp.nsecs: nanoseconds since stamp_secs\n"
    "# time-handling sugar is provided by the client library\n"
    "time stamp\n"
    "#Frame this data is associated with\n"
    "# 0: no frame\n"
    "# 1: global frame\n"
    "string frame_id\n"
    "\n"
    "================================================================================\n"
    "MSG: ar_pose/ARMarker\n"
    "Header header\n"
    "uint32 id\n"
    "geometry_msgs/PoseWithCovariance pose\n"
    "uint32 confidence\n"
    "\n"
    "================================================================================\n"
    "MSG: geometry_msgs/PoseWithCovariance\n"
    "# This represents a pose in free space with uncertainty.\n"
    "\n"
    "Pose pose\n"
    "\n"
    "# Row-major representation of the 6x6 covariance matrix\n"
    "# The orientation parameters use a fixed-axis representation.\n"
    "# In order, the parameters are:\n"
    "# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
    "float64[36] covariance\n"
    "\n"
    "================================================================================\n"
    "MSG: geometry_msgs/Pose\n"
    "# A representation of pose in free space, composed of postion and orientation. \n"
    "Point position\n"
    "Quaternion orientation\n"
    "\n"
    "================================================================================\n"
    "MSG: geometry_msgs/Point\n"
    "# This contains the position of a point in free space\n"
    "float64 x\n"
    "float64 y\n"
    "float64 z\n"
    "\n"
    "================================================================================\n"
    "MSG: geometry_msgs/Quaternion\n"
    "# This represents an orientation in free space in quaternion form.\n"
    "\n"
    "float64 x\n"
    "float64 y\n"
    "float64 z\n"
    "float64 w\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  void set_markers_size(uint32_t __ros_new_size)
  {
    this->markers.resize(__ros_new_size);
  }
  inline uint32_t get_markers_size() const { return markers.size(); }
  uint32_t calc_markers_array_serialization_len() const
  {
    uint32_t l = 0;
    uint32_t markers_size = markers.size();
    for (size_t i = 0; i < markers_size; i++)
      l += markers[i].serializationLength();
    return l;
  }
  inline void get_markers_vec (std::vector<ar_pose::ARMarker> &__ros_vec) const
  {
    __ros_vec = this->markers;
  }
  inline void set_markers_vec(const std::vector<ar_pose::ARMarker> &__ros_vec)
  {
    this->markers = __ros_vec;
  }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += header.serializationLength(); // header
    __l += 4 + calc_markers_array_serialization_len(); // markers
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
                             uint32_t seq) const
  {
    roslib::Header _ser_header = header;
    bool __reset_seq = (header.seq == 0);
    if (__reset_seq) _ser_header.seq = seq;
    write_ptr = _ser_header.serialize(write_ptr, seq);
    uint32_t __markers_size = markers.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __markers_size);
    for (size_t i = 0; i < __markers_size; i++)
      write_ptr = markers[i].serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    read_ptr = header.deserialize(read_ptr);
    uint32_t __markers_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __markers_size);
    set_markers_size(__markers_size);
    for (size_t i = 0; i < __markers_size; i++)
      read_ptr = markers[i].deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<ARMarkers> ARMarkersPtr;
typedef boost::shared_ptr<ARMarkers const> ARMarkersConstPtr;


}

#endif
